---
layout: post
title:  "Rust learning notes 3"
date:   2019-06-11 23:00:28 -0500
categories: jekyll update
---

The best way to learn is with doing and with failures.

## Maximum Depth of Binary Tree

```rust
pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        fn node_depth(node: Option<Rc<RefCell<TreeNode>>>) -> i32 {
            match node {
                Some(node) => {
                    let node = node.borrow();
                    max(
                        node_depth(node.left),
                        node_depth(node.right),
                    ) + 1
                },
                _ => 0,
            }
        }
        
        node_depth(root)
    }
```

And the compiler complains:

```
cannot move out of borrowed content 
   node_depth(node.left)

cannot move out of data in a `&` reference 
```

The reason is that, node is reference to the TreeNode, which means it is a borrowed content. However, the signature of the node_depth() declared the first argument as `Option<Rc<RefCell<TreeNode>>>` which means it will consume the input value. So the complier complains that we cannot move move the conent from a borrowed object (reference).

There are two ways to fix the problem, one is with the clone() method to create an cloned object that you own. Like below

```rust
pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        fn node_depth(node: Option<Rc<RefCell<TreeNode>>>) -> i32 {
            match node {
                Some(node) => {
                    let node = node.borrow();
                    max(
                        node_depth(node.left.clone()),
                        node_depth(node.right.clone()),
                    ) + 1
                },
                _ => 0,
            }
        }
        
        node_depth(root)
    }
```

The other way to fix it is to declare the arguments as the reference (not to consume the content)

```rust
pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        fn node_depth(node: &Option<Rc<RefCell<TreeNode>>>) -> i32 {
            match node {
                Some(node) => {
                    let node = node.borrow();
                    max(
                        node_depth(&node.left),
                        node_depth(&node.right),
                    ) + 1
                },
                _ => 0,
            }
        }

        node_depth(&root)
    }
```

One interesting to note is that the `node` is a type of `Rc`, why can we call the `borrow` method which belongs to `RefCell`. The reason is that, the signature of the `borrow()` call takes as the parameter `&self` which is reference to `RefCell`. And because `Rc` implements the `Deref` trait, the reference to `Rc` will be converted to the reference to `RefCell` due to the mechanism of Deref coercion. In other way, `Rc` will automatically implments the immutatable methods of `RefCell` due to the mechanism of [Deref coercion](https://doc.rust-lang.org/std/ops/trait.Deref.html#more-on-deref-coercion)


Another solution for this problem is like below, referenced [here](https://github.com/aylei/leetcode-rust/blob/master/src/n0104_maximum_depth_of_binary_tree.rs)

```rust
pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        fn node_depth(node: Option<&Rc<RefCell<TreeNode>>>) -> i32 {
            match node {
                Some(node) => {
                    let node = node.borrow();
                    max(
                        node_depth(node.left.as_ref()),
                        node_depth(node.right.as_ref()),
                    ) + 1
                },
                _ => 0,
            }
        }

        node_depth(root.as_ref())
    }
```

The trick here is that the `as_ref()` call can convert `&Option<T>` to `Option<&T>`


## Insufficiant nodes 

```rust

pub fn sufficient_subset(root: Option<Rc<RefCell<TreeNode>>>, limit: i32) -> Option<Rc<RefCell<TreeNode>>> {
        fn helper(root: &Option<Rc<RefCell<TreeNode>>>, limit: i32) ->
        &Option<Rc<RefCell<TreeNode>>> {
           if let Some(node) = root {
               match node.borrow().left {
                   Some(nodeleft) => {
                       match node.borrow().right {
                          Some(noderight) => {
                              let p1 = helper(&Some(noderight),limit-node.borrow().val);
                              let p2 = helper(&Some(nodeleft),limit-node.borrow().val);
                              if (p1 == p2) {
                                &None
                              }
                              else {
                                root
                              }
                                
                          },
                          None => {
                              let p1 = helper(&Some(nodeleft),limit-node.borrow().val);
                              if let Some(v) = p1 {
                                  root
                              } else {
                                  &None
                              }
                          },
                       } 
                   },
                   None => {
                      match node.borrow().right {
                          Some(noderight) => {
                              let p1 = helper(&Some(noderight),limit-node.borrow().val);
                              if let Some(v) = p1 {
                                  root
                              } else {
                                  &None
                              }
                          },
                          None => {
                              if node.borrow().val < limit {
                                  &None
                              } else {
                                  root
                              }
                          },
                       } 
                   },
               }
           } else { root }
        } 
        let rc = helper(&root,limit);
        rc.clone()
    }
```

This code has lot of problems. The first one is 

```
match node.borrow().left 
   cannot move out of borrowed content

some (nodeleft)
   data moved here
```

If we change the code to below

```rust
pub fn sufficient_subset(root: Option<Rc<RefCell<TreeNode>>>, limit: i32) -> Option<Rc<RefCell<TreeNode>>> {
        fn helper(root: &Option<Rc<RefCell<TreeNode>>>, limit: i32) ->
        &Option<Rc<RefCell<TreeNode>>> {
           if let Some(node) = root {
               match &node.borrow().left {
                   Some(nodeleft) => {
                       match &node.borrow().right {
                          Some(noderight) => {
                              let p1 = helper(&Some(*noderight),limit-node.borrow().val);
                              let p2 = helper(&Some(*nodeleft),limit-node.borrow().val);
                              if (p1 == p2) {
                                &None
                              }
                              else {
                                root
                              }
                                
                          },
                          None => {
                              let p1 = helper(&Some(*nodeleft),limit-node.borrow().val);
                              if let Some(v) = p1 {
                                  root
                              } else {
                                  &None
                              }
                          },
                       } 
                   },
                   None => {
                      match &node.borrow().right {
                          Some(noderight) => {
                              let p1 = helper(&Some(*noderight),limit-node.borrow().val);
                              if let Some(v) = p1 {
                                  root
                              } else {
                                  &None
                              }
                          },
                          None => {
                              if node.borrow().val < limit {
                                  &None
                              } else {
                                  root
                              }
                          },
                       } 
                   },
               }
           } else { root }
        } 
        let rc = helper(&root,limit);
        rc.clone()
    }
```

The compiler will then complain

```
temporary value dropped while borrowed
let p1 = helper(&Some(*noderight),limit-node.borrow().val);
                 ^^^^^^^^^^^^
               creates a temporary which is freed while still in use
```

The following code can compile 

```rust
pub fn sufficient_subset(root: Option<Rc<RefCell<TreeNode>>>, limit: i32) -> Option<Rc<RefCell<TreeNode>>> {
        fn helper(root: &Option<Rc<RefCell<TreeNode>>>, limit: i32) ->
            &Option<Rc<RefCell<TreeNode>>> {
                if let Some(node) = root {
                    match &node.borrow().left {
                        Some(nodeleft) => {
                            match &node.borrow().right {
                                Some(noderight) => {
                                    let pp1 = &node.borrow().right;
                                    let pp2 = &node.borrow().left;
                                    let p1 = helper(pp1,limit-node.borrow().val);
                                    let p2 = helper(pp2,limit-node.borrow().val);
                                    if p1.is_none() && p2.is_none() {
                                        &None
                                    }
                                    else {
                                        root
                                    }

                                },
                                None => {
                                    let pp1 = &node.borrow().left;
                                    let p1 = helper(pp1,limit-node.borrow().val);
                                    if let Some(v) = p1 {
                                        root
                                    } else {
                                        &None
                                    }
                                },
                            }
                        },
                        None => {
                            match &node.borrow().right {
                                Some(noderight) => {
                                    let pp1 = &node.borrow().right;
                                    let p1 = helper(pp1,limit-node.borrow().val);
                                    if let Some(v) = p1 {
                                        root
                                    } else {
                                        &None
                                    }
                                },
                                None => {
                                    if node.borrow().val < limit {
                                        &None
                                    } else {
                                        root
                                    }
                                },
                            }
                        },
                    }
                } else { root }
            }
        let rc = helper(&root,limit);
        rc.clone()
    }
```

But it outputs an incorrect answer.
